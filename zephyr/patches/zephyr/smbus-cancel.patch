diff --git a/drivers/i2c/i2c_ll_stm32.c b/drivers/i2c/i2c_ll_stm32.c
index 3146188f150..53312c5683b 100644
--- a/drivers/i2c/i2c_ll_stm32.c
+++ b/drivers/i2c/i2c_ll_stm32.c
@@ -309,6 +309,23 @@ restore:
 }
 #endif /* CONFIG_I2C_STM32_BUS_RECOVERY */
 
+#ifdef CONFIG_I2C_STM32_INTERRUPT
+static void i2c_stm32_cancel(const struct device *dev)
+{
+	struct i2c_stm32_data *data = dev->data;
+	if (!data->cancelled) {
+		data->cancelled = true;
+		k_sem_give(&data->device_sync_sem);
+	}
+}
+
+static void i2c_stm32_uncancel(const struct device *dev)
+{
+	struct i2c_stm32_data *data = dev->data;
+	data->cancelled = false;
+}
+#endif
+
 static DEVICE_API(i2c, api_funcs) = {
 	.configure = i2c_stm32_runtime_configure,
 	.transfer = i2c_stm32_transfer,
@@ -323,6 +340,10 @@ static DEVICE_API(i2c, api_funcs) = {
 #ifdef CONFIG_I2C_RTIO
 	.iodev_submit = i2c_iodev_submit_fallback,
 #endif
+#ifdef CONFIG_I2C_STM32_INTERRUPT
+	.cancel = i2c_stm32_cancel,
+	.uncancel = i2c_stm32_uncancel,
+#endif
 };
 
 static int i2c_stm32_init(const struct device *dev)
diff --git a/drivers/i2c/i2c_ll_stm32.h b/drivers/i2c/i2c_ll_stm32.h
index b194bc5e8f6..8093ab44ab8 100644
--- a/drivers/i2c/i2c_ll_stm32.h
+++ b/drivers/i2c/i2c_ll_stm32.h
@@ -91,6 +91,7 @@ struct i2c_stm32_data {
 #else /* CONFIG_I2C_RTIO */
 #ifdef CONFIG_I2C_STM32_INTERRUPT
 	struct k_sem device_sync_sem;
+	bool cancelled;
 #endif /* CONFIG_I2C_STM32_INTERRUPT */
 	struct k_sem bus_mutex;
 	uint32_t dev_config;
diff --git a/drivers/smbus/smbus_stm32.c b/drivers/smbus/smbus_stm32.c
index 831ea524716..bff35b8c8b0 100644
--- a/drivers/smbus/smbus_stm32.c
+++ b/drivers/smbus/smbus_stm32.c
@@ -288,6 +288,18 @@ static int smbus_stm32_block_read(const struct device *dev, uint16_t periph_addr
 	return res;
 }
 
+static int smbus_stm32_cancel(const struct device *dev)
+{
+	const struct smbus_stm32_config *config = dev->config;
+	return i2c_cancel(config->i2c_dev);
+}
+
+static int smbus_stm32_uncancel(const struct device *dev)
+{
+	const struct smbus_stm32_config *config = dev->config;
+	return i2c_uncancel(config->i2c_dev);
+}
+
 static DEVICE_API(smbus, smbus_stm32_api) = {
 	.configure = smbus_stm32_configure,
 	.get_config = smbus_stm32_get_config,
@@ -301,6 +313,8 @@ static DEVICE_API(smbus, smbus_stm32_api) = {
 	.smbus_pcall = smbus_stm32_pcall,
 	.smbus_block_write = smbus_stm32_block_write,
 	.smbus_block_read = smbus_stm32_block_read,
+	.smbus_cancel = smbus_stm32_cancel,
+	.smbus_uncancel = smbus_stm32_uncancel,
 #ifdef CONFIG_SMBUS_STM32_SMBALERT
 	.smbus_smbalert_set_cb = smbus_stm32_smbalert_set_cb,
 	.smbus_smbalert_remove_cb = smbus_stm32_smbalert_remove_cb,
diff --git a/include/zephyr/drivers/i2c.h b/include/zephyr/drivers/i2c.h
index c1972782660..ea783482406 100644
--- a/include/zephyr/drivers/i2c.h
+++ b/include/zephyr/drivers/i2c.h
@@ -241,6 +241,9 @@ typedef void (*i2c_api_iodev_submit)(const struct device *dev,
 
 typedef int (*i2c_api_recover_bus_t)(const struct device *dev);
 
+typedef void (*i2c_api_cancel_t)(const struct device *dev);
+typedef void (*i2c_api_uncancel_t)(const struct device *dev);
+
 __subsystem struct i2c_driver_api {
 	i2c_api_configure_t configure;
 	i2c_api_get_config_t get_config;
@@ -254,6 +257,8 @@ __subsystem struct i2c_driver_api {
 	i2c_api_iodev_submit iodev_submit;
 #endif
 	i2c_api_recover_bus_t recover_bus;
+	i2c_api_cancel_t cancel;
+	i2c_api_uncancel_t uncancel;
 };
 
 typedef int (*i2c_target_api_register_t)(const struct device *dev);
@@ -1336,6 +1341,58 @@ static inline int z_impl_i2c_target_driver_unregister(const struct device *dev)
 	return api->driver_unregister(dev);
 }
 
+/**
+ * @brief Cancel all outstanding I2C transactions and block future
+ *
+ * Any current I2C transaction on this device immediately fails
+ * and returns -ECANCELED. Further I2C transactions fail until
+ * i2c_uncancel is called.
+ *
+ * @param dev Pointer to the device structure for the I2C controller.
+ *
+ * @retval 0 If successful.
+ * @retval -ENOSYS If cancellation is not implemented by the driver.
+ */
+__syscall int i2c_cancel(const struct device *dev);
+
+static inline int z_impl_i2c_cancel(const struct device *dev)
+{
+	const struct i2c_driver_api *api = (const struct i2c_driver_api *)dev->api;
+
+	if (api->cancel == NULL) {
+		return -ENOSYS;
+	}
+
+	api->cancel(dev);
+
+	return 0;
+}
+
+/**
+ * @brief Restore normal I2C operation after cancellation
+ *
+ * The I2C controller processes transactions.
+ *
+ * @param dev Pointer to the device structure for the I2C controller.
+ *
+ * @retval 0 If successful.
+ * @retval -ENOSYS If cancellation is not implemented by the driver.
+ */
+__syscall int i2c_uncancel(const struct device *dev);
+
+static inline int z_impl_i2c_uncancel(const struct device *dev)
+{
+	const struct i2c_driver_api *api = (const struct i2c_driver_api *)dev->api;
+
+	if (api->uncancel == NULL) {
+		return -ENOSYS;
+	}
+
+	api->uncancel(dev);
+
+	return 0;
+}
+
 /*
  * Derived i2c APIs -- all implemented in terms of i2c_transfer()
  */
@@ -1757,6 +1814,7 @@ static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
 				   reg_addr, mask, value);
 }
 
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/include/zephyr/drivers/smbus.h b/include/zephyr/drivers/smbus.h
index de197becbc2..69731ccc1c3 100644
--- a/include/zephyr/drivers/smbus.h
+++ b/include/zephyr/drivers/smbus.h
@@ -377,6 +377,8 @@ typedef int (*smbus_api_smbalert_cb_t)(const struct device *dev,
 				       struct smbus_callback *cb);
 typedef int (*smbus_api_host_notify_cb_t)(const struct device *dev,
 					  struct smbus_callback *cb);
+typedef int (*smbus_api_cancel_t)(const struct device *dev);
+typedef int (*smbus_api_uncancel_t)(const struct device *dev);
 
 __subsystem struct smbus_driver_api {
 	smbus_api_configure_t configure;
@@ -396,6 +398,8 @@ __subsystem struct smbus_driver_api {
 	smbus_api_smbalert_cb_t smbus_smbalert_remove_cb;
 	smbus_api_host_notify_cb_t smbus_host_notify_set_cb;
 	smbus_api_host_notify_cb_t smbus_host_notify_remove_cb;
+	smbus_api_cancel_t smbus_cancel;
+	smbus_api_uncancel_t smbus_uncancel;
 };
 
 /**
@@ -1084,6 +1088,56 @@ static inline int z_impl_smbus_block_pcall(const struct device *dev,
 				       rcv_count, rcv_buf);
 }
 
+/**
+ * @brief Cancel all outstanding SMBus transactions and block future
+ *
+ * Any current SMBus transaction on this device immediately fails
+ * and returns -ECANCELED. Further SMBus transactions fail until
+ * smbus_uncancel is called.
+ *
+ * Note that this sets cancellation on the underlying I2C.
+ *
+ * @param dev Pointer to the device structure for the SMBus driver instance.
+ *
+ * @retval 0 If successful.
+ * @retval -ENOSYS If cancellation is not implemented by the driver.
+ */
+__syscall int smbus_cancel(const struct device *dev);
+
+static inline int z_impl_smbus_cancel(const struct device *dev)
+{
+	const struct smbus_driver_api *api = (const struct smbus_driver_api *)dev->api;
+
+	if (api->smbus_cancel == NULL) {
+		return -ENOSYS;
+	}
+
+	return api->smbus_cancel(dev);
+}
+
+/**
+ * @brief Restore normal SMBus operation after cancellation
+ *
+ * SMBus and underlying I2C return to normal operation.
+ *
+ * @param dev Pointer to the device structure for the SMBus driver instance.
+ *
+ * @retval 0 If successful.
+ * @retval -ENOSYS If cancellation is not implemented by the driver.
+ */
+__syscall int smbus_uncancel(const struct device *dev);
+
+static inline int z_impl_smbus_uncancel(const struct device *dev)
+{
+	const struct smbus_driver_api *api = (const struct smbus_driver_api *)dev->api;
+
+	if (api->smbus_uncancel == NULL) {
+		return -ENOSYS;
+	}
+
+	return api->smbus_uncancel(dev);
+}
+
 #ifdef __cplusplus
 }
 #endif
