name: Create a Release

on:
  push:
    tags:
      - 'v*'
      - 'v*rc*'

env:
  RELEASE_NOTES_DIR: doc/release
  SET_VARS_CMDS: |
    VERSION=${GITHUB_REF#refs/tags/}
    echo "VERSION=$VERSION" | tee -a $GITHUB_OUTPUT
    TRIMMED_VERSION=${VERSION/v}
    TRIMMED_VERSION="$(echo "$TRIMMED_VERSION" | sed -e 's/\([0-9]\+\.[0-9]\+\).*/\1/')"
    echo "TRIMMED_VERSION=$TRIMMED_VERSION" | tee -a $GITHUB_OUTPUT
    if [ "$VERSION" = "${VERSION/rc}" ]; then
      # not an rc, so we should generate release notes
      echo "RELEASE_NOTES=release-notes-$TRIMMED_VERSION.md" | tee -a $GITHUB_OUTPUT
    else
      echo "Not publishing release notes for release candidate $VERSION"
    fi

jobs:
  prepare-release:
    runs-on: ubuntu-24.04
    outputs:
      boards: ${{ steps.genboards.outputs.boards }}
      recovery_boards: ${{ steps.genboards.outputs.recovery_boards }}
    steps:
      - id: set_vars
        run: ${{ env.SET_VARS_CMDS }}
      - uses: actions/checkout@v4
      - id: genboards
        shell: bash
        run: |
          BOARDS="$(jq -r -c ".[]" .github/boards.json)"
          BOARDS="${BOARDS//$'\n'/ }" # Remove embedded newlines
          echo "boards=$BOARDS" | tee -a $GITHUB_OUTPUT
          echo "recovery_boards=$(jq -c 'map(select(. != "galaxy"))' .github/boards.json)" | tee -a $GITHUB_OUTPUT
      - id: check_relnotes_file
        run: |
          relnotes_file="${{ env.RELEASE_NOTES_DIR }}/${{ steps.set_vars.outputs.RELEASE_NOTES }}"
          if [ "${{ steps.set_vars.outputs.RELEASE_NOTES }}" != "" ] && [ ! -f "$relnotes_file" ]; then
            echo "Release notes file is not present: $relnotes_file"
            exit 1
          fi
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v5
        with:
          args: spdx -o tt-zephyr-platforms-${{ steps.set_vars.outputs.VERSION }}.spdx

      - name: Upload SPDX
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: tt-zephyr-platforms-${{ steps.set_vars.outputs.VERSION }}.spdx
          path: tt-zephyr-platforms-${{ steps.set_vars.outputs.VERSION }}.spdx

      - name: Upload Release Notes
        if: ${{ steps.set_vars.outputs.RELEASE_NOTES }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ steps.set_vars.outputs.RELEASE_NOTES }}
          path: ${{ env.RELEASE_NOTES_DIR }}/${{ steps.set_vars.outputs.RELEASE_NOTES }}

  build-recovery-bundle:
    runs-on: ubuntu-24.04
    needs: prepare-release
    strategy:
      fail-fast: false
      matrix:
        board: ${{ fromJson(needs.prepare-release.outputs.recovery_boards) }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: tt-zephyr-platforms
      - uses: ./tt-zephyr-platforms/.github/workflows/prepare-zephyr
        with:
          app-path: tt-zephyr-platforms
      - shell: bash
        run: |
          SIGNATURE_KEY_FILE="$(mktemp)"
          echo "${{ secrets.SIGNATURE_KEY }}" | base64 -d > "$SIGNATURE_KEY_FILE"
          SZ=$(wc -c "$SIGNATURE_KEY_FILE" | awk '{print $1}')
          if [ $SZ -gt 42 ]; then
            echo "SIGNATURE_KEY_FILE=$SIGNATURE_KEY_FILE" >> "$GITHUB_ENV"
          fi
      - name: Build Recovery Bundle
        shell: bash
        run: |
          python3 tt-zephyr-platforms/scripts/tooling/blackhole_recovery/prepare-recovery-bundle.py \
            --board ${{ matrix.board }} \
            --signing-key "$SIGNATURE_KEY_FILE" \
            fw-pack-${{ github.ref_name }}-${{ matrix.board }}-recovery.tar.gz

      - name: Upload Recovery Assets
        uses: actions/upload-artifact@v4
        with:
          name: firmware-recovery-${{ matrix.board }}
          path: |
            fw-pack-${{ github.ref_name }}-${{ matrix.board }}-recovery.tar.gz

  build-release:
    needs: [prepare-release]
    uses: ./.github/workflows/build-fw.yml
    secrets:
      SIGNATURE_KEY: ${{ secrets.SIGNATURE_KEY }}

  publish-release:
    needs: [build-release, prepare-release, build-recovery-bundle]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - id: set_vars
        run: ${{ env.SET_VARS_CMDS }}
      - name: Download firmware artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: firmware-*

      - name: Download combined firmware bundle
        uses: actions/download-artifact@v4
        with:
          name: combined-fwbundle

      - name: Download Release Notes
        if: ${{ steps.set_vars.outputs.RELEASE_NOTES }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.set_vars.outputs.RELEASE_NOTES }}

      - name: Download SPDX
        uses: actions/download-artifact@v4
        with:
          name: tt-zephyr-platforms-${{ steps.set_vars.outputs.VERSION }}.spdx

      - name: Package firmware artifacts
        shell: bash
        run: |
          BOARD_REVS=(${{ needs.prepare-release.outputs.boards }})

          for REV in ${BOARD_REVS[@]}; do
            mv firmware-$REV $REV
            mv $REV/update.fwbundle $REV.fwbundle
          done

          # Combine recovery bundles
          mkdir firmware-recovery-${{ github.ref_name }}
          for REV in ${BOARD_REVS[@]}; do
            if [[ "$REV" == "galaxy" ]]; then
              continue
            fi
            tar xf firmware-recovery-$REV/fw-pack-${{ github.ref_name }}-$REV-recovery.tar.gz -C firmware-recovery-${{ github.ref_name }}
          done
          tar zcf fw-pack-${{ github.ref_name }}-recovery.tar.gz -C firmware-recovery-${{ github.ref_name }} .

          zip -r -9 tt-zephyr-platforms-${{ steps.set_vars.outputs.VERSION }}.zip ${BOARD_REVS[@]}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          # Note: body path _may_ be empty for release candidates, even with fail_on_unmatched_files == true
          body_path: ${{ steps.set_vars.outputs.RELEASE_NOTES }}
          draft: true
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            fw-pack-${{ github.ref_name }}-recovery.tar.gz
            *.fwbundle
            tt-zephyr-platforms-${{ steps.set_vars.outputs.VERSION }}.zip
            tt-zephyr-platforms-${{ steps.set_vars.outputs.VERSION }}.spdx
